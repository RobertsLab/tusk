[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Where the fun starts",
    "section": "",
    "text": "This is a portal developed out as a Course Set where core learning modules exist. Please see sidebar menu for specific modules. There is a logic to the order as modules build as you go down the list, though they are developed where they are also stand-alone.\nIf you want to contribute, have suggestions, want to see additional resources related to data science, or learn more about what our lab does please visit the about page."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a Quarto Website that you can contribute to at\nhttps://github.com/RobertsLab/tusk\nPlease see the readme file for instructions and guidelines for contribution."
  },
  {
    "objectID": "modules/00-markdown.html",
    "href": "modules/00-markdown.html",
    "title": "markdown",
    "section": "",
    "text": "Markdown is a lightweight markup language created by John Gruber and Aaron Swartz in 2004. It is designed to be easy-to-read and easy-to-write. The syntax allows you to format text using simple symbols and characters you already know. For example, you can use asterisks * or underscores _ to create italics or bold text. You can also create lists, headers, links, and many other formatting features easily.\n\n\n\n\nMarkdown is much simpler to learn compared to other markup languages like HTML. This makes it a quick tool for anyone who wants to write well-formatted content without the steep learning curve.\n\n\n\nMarkdown files are plain text files with a .md extension, which means they can be opened with any text editor. This makes them extremely portable and easy to manage.\n\n\n\nMarkdown is commonly used for readme files, GitHub repositories, blogging platforms like Jekyll, and even in data science notebooks like Jupyter.\n\n\n\nThe syntax is designed to be readable as-is, so even if you’re not rendering the Markdown to HTML or another format, it’s still easy to understand what’s going on.\n\n\n\n\nHere are some basic examples of Markdown syntax:\n\nHeaders:\n# H1\n## H2\n### H3\nLists:\n- Item 1\n- Item 2\n    - Sub-item\nor\n1. Item 1\n2. Item 2\nLinks:\n[OpenAI](https://www.openai.com/)\nImages:\n![Alt text](url)\nCode Blocks:\n```bash\n Code goes here\n```\nIn-line Code:\nUse `code` in your markdown file.\n\n\n\n\n\n\nThe beauty of Markdown lies in its simplicity. Stick to the basics unless there’s a strong reason to use a complex feature.\n\n\n\nIf you’re working on a longer document or a series of documents, be consistent in your style and formatting. This will make it easier for others (or future you) to read and modify the content.\n\n\n\nConsider using a Markdown style guide or linter to keep your formatting consistent. This is especially helpful for collaborative projects.\n\n\n\nMany platforms support Markdown extensions that provide additional features like tables, footnotes, and task lists. While these are useful, keep in mind that they may not be supported everywhere.\n\n\n\nAlways preview your Markdown file before publishing to make sure it looks the way you intended.\nBy adopting these best practices, you’ll be able to create content that is clean, easy to read, and easy to maintain."
  },
  {
    "objectID": "modules/00-markdown.html#why-is-markdown-useful",
    "href": "modules/00-markdown.html#why-is-markdown-useful",
    "title": "markdown",
    "section": "",
    "text": "Markdown is much simpler to learn compared to other markup languages like HTML. This makes it a quick tool for anyone who wants to write well-formatted content without the steep learning curve.\n\n\n\nMarkdown files are plain text files with a .md extension, which means they can be opened with any text editor. This makes them extremely portable and easy to manage.\n\n\n\nMarkdown is commonly used for readme files, GitHub repositories, blogging platforms like Jekyll, and even in data science notebooks like Jupyter.\n\n\n\nThe syntax is designed to be readable as-is, so even if you’re not rendering the Markdown to HTML or another format, it’s still easy to understand what’s going on."
  },
  {
    "objectID": "modules/00-markdown.html#markdown-syntax-and-examples",
    "href": "modules/00-markdown.html#markdown-syntax-and-examples",
    "title": "markdown",
    "section": "",
    "text": "Here are some basic examples of Markdown syntax:\n\nHeaders:\n# H1\n## H2\n### H3\nLists:\n- Item 1\n- Item 2\n    - Sub-item\nor\n1. Item 1\n2. Item 2\nLinks:\n[OpenAI](https://www.openai.com/)\nImages:\n![Alt text](url)\nCode Blocks:\n```bash\n Code goes here\n```\nIn-line Code:\nUse `code` in your markdown file."
  },
  {
    "objectID": "modules/00-markdown.html#best-practices",
    "href": "modules/00-markdown.html#best-practices",
    "title": "markdown",
    "section": "",
    "text": "The beauty of Markdown lies in its simplicity. Stick to the basics unless there’s a strong reason to use a complex feature.\n\n\n\nIf you’re working on a longer document or a series of documents, be consistent in your style and formatting. This will make it easier for others (or future you) to read and modify the content.\n\n\n\nConsider using a Markdown style guide or linter to keep your formatting consistent. This is especially helpful for collaborative projects.\n\n\n\nMany platforms support Markdown extensions that provide additional features like tables, footnotes, and task lists. While these are useful, keep in mind that they may not be supported everywhere.\n\n\n\nAlways preview your Markdown file before publishing to make sure it looks the way you intended.\nBy adopting these best practices, you’ll be able to create content that is clean, easy to read, and easy to maintain."
  },
  {
    "objectID": "modules/03-rstudio.html",
    "href": "modules/03-rstudio.html",
    "title": "RStudio",
    "section": "",
    "text": "RStudio is an Integrated Development Environment (IDE) for R, a programming language for statistical computing and data visualization. Developed by RStudio, Inc., this IDE provides a user-friendly interface to R, making it easier to write code, run analyses, and produce plots. It includes features such as syntax highlighting, code completion, and the ability to run R code interactively.\n\n\n\n\nRStudio consolidates your code, plots, and output in one place, improving workflow and making the process more efficient.\n\n\n\nWith features like auto-completion and built-in debugging tools, RStudio speeds up the coding process.\n\n\n\nRStudio simplifies the process of creating complex data visualizations by providing easy-to-use interfaces for ggplot2, Shiny, and other R packages.\n\n\n\nRStudio includes integrated support for Git and GitHub, making it easier to manage changes to your code and collaborate with others.\n\n\n\nRStudio supports various R packages and also allows the use of other programming languages like C++, Python, and SQL within the IDE.\n\n\n\n\n\nScript Editor: Write and edit your R scripts.\nConsole: Run R commands interactively.\n&gt; print(\"Hello, World!\")\nEnvironment: View and manage all variables, data frames, and other objects in your R session.\nPlots: Visualize your data and generate plots easily.\nggplot(data, aes(x=x, y=y)) + geom_point()\nPackages: Install and manage R packages.\ninstall.packages(\"tidyverse\")\nHelp: Access R documentation quickly.\nFile Browser: Navigate your file system and manage your project files.\nVersion Control: Manage Git repositories directly within RStudio.\ngit commit -m \"Initial commit\"\nShiny Apps: Build interactive web apps right within RStudio.\n\n\n\n\n\n\nUse RStudio Projects to keep your scripts, data, and other files organized. This makes it easier to manage complex analyses and collaborate with others.\n\n\n\nUse comments to describe what your code is doing. This makes it easier for you (and others) to understand the logic later.\n```R\n# Calculate the mean of x\nmean_x &lt;- mean(x)\n```\n\n\n\nMake your code and analyses reproducible. Use relative file paths and R Markdown documents to ensure others can easily run your code.\n\n\n\nUse Git to keep track of changes in your project. This is invaluable for collaboration and data science project management.\n\n\n\nDon’t reinvent the wheel. Make use of R’s extensive library of packages and functions to perform common tasks.\n\n\n\nLearn RStudio’s keyboard shortcuts to navigate the IDE more efficiently.\n\n\n\nTo make use of the latest features and improvements, keep your R and RStudio installations up to date.\nBy adhering to these best practices, you can make the most out of RStudio, whether you’re doing data analysis, statistical modeling, or creating data visualizations."
  },
  {
    "objectID": "modules/03-rstudio.html#why-is-rstudio-useful",
    "href": "modules/03-rstudio.html#why-is-rstudio-useful",
    "title": "RStudio",
    "section": "",
    "text": "RStudio consolidates your code, plots, and output in one place, improving workflow and making the process more efficient.\n\n\n\nWith features like auto-completion and built-in debugging tools, RStudio speeds up the coding process.\n\n\n\nRStudio simplifies the process of creating complex data visualizations by providing easy-to-use interfaces for ggplot2, Shiny, and other R packages.\n\n\n\nRStudio includes integrated support for Git and GitHub, making it easier to manage changes to your code and collaborate with others.\n\n\n\nRStudio supports various R packages and also allows the use of other programming languages like C++, Python, and SQL within the IDE."
  },
  {
    "objectID": "modules/03-rstudio.html#key-rstudio-features-and-examples",
    "href": "modules/03-rstudio.html#key-rstudio-features-and-examples",
    "title": "RStudio",
    "section": "",
    "text": "Script Editor: Write and edit your R scripts.\nConsole: Run R commands interactively.\n&gt; print(\"Hello, World!\")\nEnvironment: View and manage all variables, data frames, and other objects in your R session.\nPlots: Visualize your data and generate plots easily.\nggplot(data, aes(x=x, y=y)) + geom_point()\nPackages: Install and manage R packages.\ninstall.packages(\"tidyverse\")\nHelp: Access R documentation quickly.\nFile Browser: Navigate your file system and manage your project files.\nVersion Control: Manage Git repositories directly within RStudio.\ngit commit -m \"Initial commit\"\nShiny Apps: Build interactive web apps right within RStudio."
  },
  {
    "objectID": "modules/03-rstudio.html#best-practices",
    "href": "modules/03-rstudio.html#best-practices",
    "title": "RStudio",
    "section": "",
    "text": "Use RStudio Projects to keep your scripts, data, and other files organized. This makes it easier to manage complex analyses and collaborate with others.\n\n\n\nUse comments to describe what your code is doing. This makes it easier for you (and others) to understand the logic later.\n```R\n# Calculate the mean of x\nmean_x &lt;- mean(x)\n```\n\n\n\nMake your code and analyses reproducible. Use relative file paths and R Markdown documents to ensure others can easily run your code.\n\n\n\nUse Git to keep track of changes in your project. This is invaluable for collaboration and data science project management.\n\n\n\nDon’t reinvent the wheel. Make use of R’s extensive library of packages and functions to perform common tasks.\n\n\n\nLearn RStudio’s keyboard shortcuts to navigate the IDE more efficiently.\n\n\n\nTo make use of the latest features and improvements, keep your R and RStudio installations up to date.\nBy adhering to these best practices, you can make the most out of RStudio, whether you’re doing data analysis, statistical modeling, or creating data visualizations."
  },
  {
    "objectID": "modules/01-github.html",
    "href": "modules/01-github.html",
    "title": "GitHub",
    "section": "",
    "text": "GitHub is a web-based platform that provides hosting for software development and a set of tools for version control using Git. Created by Tom Preston-Werner, Chris Wanstrath, and PJ Hyett in 2008, GitHub has become one of the most popular platforms for developers to share code, collaborate on projects, and even showcase their portfolio.\n\n\n\n\nGitHub makes it extremely easy for multiple people to work on the same project. Features like forks, pull requests, and issues help facilitate effective collaboration.\n\n\n\nBuilt on Git, GitHub provides robust version control capabilities, allowing you to keep track of changes, revert to previous states, and work on different branches simultaneously.\n\n\n\nGitHub is not just for code. It’s widely used for documentation, thanks to support for Markdown and GitHub Pages which can turn repositories into full-fledged, static websites.\n\n\n\n\n\nRepositories: Central locations for storing all of your project’s files and revision history.\nCommits: Save changes to the repository.\ngit add .\ngit commit -m \"Your message here\"\nIssues: Report bugs, request features, and manage tasks in a project.\nActions: Automate tasks like building, testing, and deploying your code.\nGitHub Pages: Host websites directly from a GitHub repository.\n\n\n\n\n\n\nCommit messages should be concise and describe what was done and why. This makes it easier to review changes later.\n\n\n\nAlways include a README.md file to explain what your project is, how to set it up, and how to use it. Good documentation encourages collaboration.\n\n\n\nMake use of GitHub features like Projects, Milestones, and Labels to organize and track work on your repositories.\nBy adhering to these best practices, you can make the most out of GitHub’s myriad features for both personal and collaborative projects."
  },
  {
    "objectID": "modules/01-github.html#why-is-github-useful",
    "href": "modules/01-github.html#why-is-github-useful",
    "title": "GitHub",
    "section": "",
    "text": "GitHub makes it extremely easy for multiple people to work on the same project. Features like forks, pull requests, and issues help facilitate effective collaboration.\n\n\n\nBuilt on Git, GitHub provides robust version control capabilities, allowing you to keep track of changes, revert to previous states, and work on different branches simultaneously.\n\n\n\nGitHub is not just for code. It’s widely used for documentation, thanks to support for Markdown and GitHub Pages which can turn repositories into full-fledged, static websites."
  },
  {
    "objectID": "modules/01-github.html#key-github-features-and-examples",
    "href": "modules/01-github.html#key-github-features-and-examples",
    "title": "GitHub",
    "section": "",
    "text": "Repositories: Central locations for storing all of your project’s files and revision history.\nCommits: Save changes to the repository.\ngit add .\ngit commit -m \"Your message here\"\nIssues: Report bugs, request features, and manage tasks in a project.\nActions: Automate tasks like building, testing, and deploying your code.\nGitHub Pages: Host websites directly from a GitHub repository."
  },
  {
    "objectID": "modules/01-github.html#best-practices",
    "href": "modules/01-github.html#best-practices",
    "title": "GitHub",
    "section": "",
    "text": "Commit messages should be concise and describe what was done and why. This makes it easier to review changes later.\n\n\n\nAlways include a README.md file to explain what your project is, how to set it up, and how to use it. Good documentation encourages collaboration.\n\n\n\nMake use of GitHub features like Projects, Milestones, and Labels to organize and track work on your repositories.\nBy adhering to these best practices, you can make the most out of GitHub’s myriad features for both personal and collaborative projects."
  },
  {
    "objectID": "modules/02-bash.html",
    "href": "modules/02-bash.html",
    "title": "bash",
    "section": "",
    "text": "Bash, or the Bourne Again Shell, is a Unix shell and command-line interface for operating systems like Linux and macOS. Created by Brian Fox in 1989 as a free software replacement for the Bourne Shell, Bash is one of the most widely-used and powerful shells available. It serves as both a scripting language and an interactive command interpreter.\n\n\n\n\nBash scripts can automate repetitive tasks, making your workflow more efficient.\n\n\n\nBash is crucial for system administration tasks such as managing users, processes, and system updates.\n\n\n\nBash commands can be combined and executed in a variety of ways to perform complex tasks.\n\n\n\nBash scripts are usually portable across different Unix-based systems with little to no modification.\n\n\n\nBash can interact with other command-line tools and languages like awk, sed, and even Python, further extending its utility.\n\n\n\n\n\nCommands: The basic units of instruction in Bash.\nls  # List files\ncd directory/  # Change directory\nVariables: Store data that can be accessed and manipulated.\nNAME=\"John\"\necho $NAME\nControl Structures: If-else statements, loops, and case statements to control flow.\nif [ \"$a\" -eq \"$b\" ]; then\n    echo \"a is equal to b\"\nfi\nPipes and Redirection: Connect multiple commands and redirect output.\nls | grep '.txt'  # List only .txt files\necho \"Hello\" &gt; file.txt  # Write to file\nScripting: Combine all of the above to write complex scripts.\n#!/bin/bash\n# This is a simple script\necho \"Hello, world!\"\n\n\n\n\n\n\nAlways comment your scripts to explain what each part is doing. This is especially useful for more complex scripts.\n# This is a comment explaining the following line of code\nls\n\n\n\nChoose descriptive variable names to make your script more readable.\n# Good\nfile_count=10\n\n# Bad\nfc=10\n\n\n\nBash has many features, but that doesn’t mean you have to use them all. Stick to the simplest approach that gets the job done.\nBy following these best practices, you can write effective, robust, and maintainable Bash scripts, making the most of what this versatile tool has to offer."
  },
  {
    "objectID": "modules/02-bash.html#why-is-bash-useful",
    "href": "modules/02-bash.html#why-is-bash-useful",
    "title": "bash",
    "section": "",
    "text": "Bash scripts can automate repetitive tasks, making your workflow more efficient.\n\n\n\nBash is crucial for system administration tasks such as managing users, processes, and system updates.\n\n\n\nBash commands can be combined and executed in a variety of ways to perform complex tasks.\n\n\n\nBash scripts are usually portable across different Unix-based systems with little to no modification.\n\n\n\nBash can interact with other command-line tools and languages like awk, sed, and even Python, further extending its utility."
  },
  {
    "objectID": "modules/02-bash.html#key-bash-features-and-examples",
    "href": "modules/02-bash.html#key-bash-features-and-examples",
    "title": "bash",
    "section": "",
    "text": "Commands: The basic units of instruction in Bash.\nls  # List files\ncd directory/  # Change directory\nVariables: Store data that can be accessed and manipulated.\nNAME=\"John\"\necho $NAME\nControl Structures: If-else statements, loops, and case statements to control flow.\nif [ \"$a\" -eq \"$b\" ]; then\n    echo \"a is equal to b\"\nfi\nPipes and Redirection: Connect multiple commands and redirect output.\nls | grep '.txt'  # List only .txt files\necho \"Hello\" &gt; file.txt  # Write to file\nScripting: Combine all of the above to write complex scripts.\n#!/bin/bash\n# This is a simple script\necho \"Hello, world!\""
  },
  {
    "objectID": "modules/02-bash.html#best-practices",
    "href": "modules/02-bash.html#best-practices",
    "title": "bash",
    "section": "",
    "text": "Always comment your scripts to explain what each part is doing. This is especially useful for more complex scripts.\n# This is a comment explaining the following line of code\nls\n\n\n\nChoose descriptive variable names to make your script more readable.\n# Good\nfile_count=10\n\n# Bad\nfc=10\n\n\n\nBash has many features, but that doesn’t mean you have to use them all. Stick to the simplest approach that gets the job done.\nBy following these best practices, you can write effective, robust, and maintainable Bash scripts, making the most of what this versatile tool has to offer."
  },
  {
    "objectID": "modules/04-blast.html",
    "href": "modules/04-blast.html",
    "title": "NCBI Blast",
    "section": "",
    "text": "For the first task you will take an unknown multi-fasta file and annotate it using blast. You are welcome to do this in terminal, Rstudio, or jupyter. My recommendation, and how I will demonstrate is using Rmarkdown. Once you have have your project structured, we will download software, databases, a fasta file and run the code.\nThis is product offers a workflow to take a few thousand unidentified sequences and provide a better understanding of what genes are present. This will be accomplished through using Blast and protein sequenes from UniProt/Swiss-prot."
  },
  {
    "objectID": "modules/04-blast.html#obtain-fasta-uniprotswiss-prot",
    "href": "modules/04-blast.html#obtain-fasta-uniprotswiss-prot",
    "title": "NCBI Blast",
    "section": "Obtain Fasta (UniProt/Swiss-Prot)",
    "text": "Obtain Fasta (UniProt/Swiss-Prot)\nThis is from here picur reviewe sequences I named based on the identify of the database given\n\n\ncurrent date and time is  September 26, 2023 21:17:53\n\n\n\ncd ../data\ncurl -O https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\nmv uniprot_sprot.fasta.gz uniprot_sprot_r2023_04.fasta.gz\ngunzip -k uniprot_sprot_r2023_04.fasta.gz"
  },
  {
    "objectID": "modules/04-blast.html#making-the-database",
    "href": "modules/04-blast.html#making-the-database",
    "title": "NCBI Blast",
    "section": "Making the database",
    "text": "Making the database\n\nmkdir ../blastdb\n/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in ../data/uniprot_sprot_r2023_01.fasta \\\n-dbtype prot \\\n-out ../blastdb/uniprot_sprot_r2023_01"
  },
  {
    "objectID": "modules/04-blast.html#prepping-blast-table-for-easy-join",
    "href": "modules/04-blast.html#prepping-blast-table-for-easy-join",
    "title": "NCBI Blast",
    "section": "Prepping Blast table for easy join",
    "text": "Prepping Blast table for easy join\n\ntr '|' '\\t' &lt; ../output/Ab_4-uniprot_blastx.tab \\\n&gt; ../output/Ab_4-uniprot_blastx_sep.tab\n\nhead -1 ../output/Ab_4-uniprot_blastx_sep.tab"
  },
  {
    "objectID": "modules/04-blast.html#could-do-some-cool-stuff-in-r-here-reading-in-table",
    "href": "modules/04-blast.html#could-do-some-cool-stuff-in-r-here-reading-in-table",
    "title": "NCBI Blast",
    "section": "Could do some cool stuff in R here reading in table",
    "text": "Could do some cool stuff in R here reading in table\n\nbltabl &lt;- read.csv(\"../output/Ab_4-uniprot_blastx_sep.tab\", sep = '\\t', header = FALSE)\n\nspgo &lt;- read.csv(\"https://gannet.fish.washington.edu/seashell/snaps/uniprot_table_r2023_01.tab\", sep = '\\t', header = TRUE)\n\n\ndatatable(head(bltabl), options = list(scrollX = TRUE, scrollY = \"400px\", scrollCollapse = TRUE, paging = FALSE))\n\n\ndatatable(head(spgo), options = list(scrollX = TRUE, scrollY = \"400px\", scrollCollapse = TRUE, paging = FALSE))\n\n\ndatatable(\n  left_join(bltabl, spgo,  by = c(\"V3\" = \"Entry\")) %&gt;%\n  select(V1, V3, V13, Protein.names, Organism, Gene.Ontology..biological.process., Gene.Ontology.IDs) %&gt;% mutate(V1 = str_replace_all(V1, \n            pattern = \"solid0078_20110412_FRAG_BC_WHITE_WHITE_F3_QV_SE_trimmed\", replacement = \"Ab\"))\n)\n\n\nannot_tab &lt;-\n  left_join(bltabl, spgo,  by = c(\"V3\" = \"Entry\")) %&gt;%\n  select(V1, V3, V13, Protein.names, Organism, Gene.Ontology..biological.process., Gene.Ontology.IDs) %&gt;% mutate(V1 = str_replace_all(V1, \n            pattern = \"solid0078_20110412_FRAG_BC_WHITE_WHITE_F3_QV_SE_trimmed\", replacement = \"Ab\"))\n\n\n# Read dataset\ndataset &lt;- read.csv(\"../output/blast_annot_go.tab\", sep = '\\t')  # Replace with the path to your dataset\n\n# Select the column of interest\ncolumn_name &lt;- \"Organism\"  # Replace with the name of the column of interest\ncolumn_data &lt;- dataset[[column_name]]\n\n# Count the occurrences of the strings in the column\nstring_counts &lt;- table(column_data)\n\n# Convert to a data frame, sort by count, and select the top 10\nstring_counts_df &lt;- as.data.frame(string_counts)\ncolnames(string_counts_df) &lt;- c(\"String\", \"Count\")\nstring_counts_df &lt;- string_counts_df[order(string_counts_df$Count, decreasing = TRUE), ]\ntop_10_strings &lt;- head(string_counts_df, n = 10)\n\n# Plot the top 10 most common strings using ggplot2\nggplot(top_10_strings, aes(x = reorder(String, -Count), y = Count, fill = String)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", color = \"black\") +\n  labs(title = \"Top 10 Species hits\",\n       x = column_name,\n       y = \"Count\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n\ndata &lt;- read.csv(\"../output/blast_annot_go.tab\", sep = '\\t')\n\n# Rename the `Gene.Ontology..biological.process.` column to `Biological_Process`\ncolnames(data)[colnames(data) == \"Gene.Ontology..biological.process.\"] &lt;- \"Biological_Process\"\n\n# Separate the `Biological_Process` column into individual biological processes\ndata_separated &lt;- unlist(strsplit(data$Biological_Process, split = \";\"))\n\n# Trim whitespace from the biological processes\ndata_separated &lt;- gsub(\"^\\\\s+|\\\\s+$\", \"\", data_separated)\n\n# Count the occurrences of each biological process\nprocess_counts &lt;- table(data_separated)\nprocess_counts &lt;- data.frame(Biological_Process = names(process_counts), Count = as.integer(process_counts))\nprocess_counts &lt;- process_counts[order(-process_counts$Count), ]\n\n# Select the 20 most predominant biological processes\ntop_20_processes &lt;- process_counts[1:20, ]\n\n# Create a color palette for the bars\nbar_colors &lt;- rainbow(nrow(top_20_processes))\n\n# Create a staggered vertical bar plot with different colors for each bar\nbarplot(top_20_processes$Count, names.arg = rep(\"\", nrow(top_20_processes)), col = bar_colors,\n        ylim = c(0, max(top_20_processes$Count) * 1.25),\n        main = \"Occurrences of the 20 Most Predominant Biological Processes\", xlab = \"Biological Process\", ylab = \"Count\")\n\n\n# Create a separate plot for the legend\npng(\"../output/GOlegend.png\", width = 800, height = 600)\npar(mar = c(0, 0, 0, 0))\nplot.new()\nlegend(\"center\", legend = top_20_processes$Biological_Process, fill = bar_colors, cex = 1, title = \"Biological Processes\")\ndev.off()\n\n\nknitr::include_graphics(\"../output/GOlegend.png\")"
  }
]